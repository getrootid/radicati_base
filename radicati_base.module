<?php

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Component\Utility\Html;


/**
 * Implements hook_theme().
 */
function radicati_base_theme($existing, $type, $theme, $path) {
  return [
    'radicati_search_form' => [
      'variables' => [
        'action_route' => NULL,
      ]
    ],
    'radicati_button' => [
      'variables' => [
        'button_label' => '',
        'label_display' => 'none',
        'icon_classes' => '',
        'button_id' => '',
        'icon_classes_active' => '',
        'aria_controls' => '',
      ],
    ],
  ];
}

function radicati_base_layout_builder_browser_alter(&$build, $context) {
  // Styling for the layout builder browser.
  $build['#attached']['library'][] = 'radicati_base/layout-builder--browser';
}

/**
 *
 * Allow Inline Entity Form to display the title of the paragraph entity instead of complete
 * gibberish.
 *
 * TODO: The gibberish is still displayed when searching for a saved paragraph entity.
 *
 *
 * @param $fields
 * @param $context
 */
function radicati_base_inline_entity_form_table_fields_alter(&$fields, $context) {
  if ($context['entity_type'] == 'paragraph') {
    unset($fields['label']);

    $fields['title'] = [
      'type' => 'callback',
      'label' => t('Title'),
      'callback' => '_rb_ief_table_field_title',
    ];
  }
}

/**
 * @param $entity A Paragraph entity.
 * @return mixed The label to use in the edit form.
 */
function _rb_ief_table_field_title($entity) {

  // If the entity bundle has a preview mode defined, then use that.
  $viewModes = \Drupal::service('entity_display.repository')->getViewModeOptionsByBundle('paragraph', $entity->bundle());
  if(!empty($viewModes['preview'])) {
    $viewBuilder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
    return $viewBuilder->view($entity, 'preview');
  }

  // If there isn't a preview mode defined, then use the summary.
  return $entity->getSummary();
}

/**
 * A one-two punch that allows an editor to override the alt text for an image.
 */
function radicati_base_preprocess_field(&$variables) {
  if($variables['element']['#field_type'] == 'entity_reference') {
    // See if the field_alt_override field exists on the parent entity.
    if($variables['element']['#object']->hasField('field_alt_text_override')) {

      if(!$variables['element']['#object']->get('field_alt_text_override')->isEmpty()) {
        $variables['element']['#items'][0]->entity->alt_override = $variables["element"]['#object']->get('field_alt_text_override')->value;
      } else {
        unset($variables['element']['#items'][0]->entity->alt_override);
      }

      // Invalidate the cache for this media entity.
      $variables['element']['#items'][0]->entity->save();
    }
  }
}

/**
 * Implements hook_preprocess().
 */
function radicati_base_preprocess_media__image(&$variables) {
  if(!empty($variables['elements']['#media']->alt_override)) {
    $variables['content']['field_media_image'][0]['#item']->set('alt',  $variables['elements']['#media']->alt_override);
  }
}

function radicati_base_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  foreach ($display->getComponents() as $key => $field) {
    if (isset($field['type']) && $field['type'] === 'rad_tax_setting') {
      $field_name = substr($key, 6);

      if ($entity->hasField($key)) {
        $terms = $entity->get($key)->referencedEntities();

        foreach ($terms as $term) {
          $title = $term->getName();
          $title = strtolower($title);
          $title = $field_name . "--" . $title;
          $build['#attributes']['class'][] = Html::cleanCssIdentifier($title);
        }
      }
    }
  }
}